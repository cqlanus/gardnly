type User @model {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    created: String!
    gardens: [Garden] @connection(name: "UserGardens")
}

type Garden @model @auth(rules: [{ allow: owner }]) @searchable {
    id: ID!
    created: String!
    name: String!
    location: String
    zip: String!
    length: Int!
    width: Int!
    user: User @connection(name: "UserGardens")
    beds: [Bed] @connection(name: "GardenBeds")
}

type Bed @model @auth(rules: [{ allow: owner }]) {
    id: ID!
    created: String!
    name: String!
    length: Int!
    width: Int!
    x: Int
    y: Int
    invert: Boolean
    exposure: String
    hasDropped: Boolean
    plantings: [Planting] @connection(name: "BedPlantings")
    garden: Garden @connection(name: "GardenBeds")
}

type Planting @model @auth(rules: [{ allow: owner }]) {
    id: ID
    created: String!
    crop: Crop @connection
    bed: Bed @connection(name: "BedPlantings")
    row: Int!
    column: Int!
    plantedOn: String
    bySeed: Boolean
}

enum Level {
    HIGH
    MED
    LOW
}

enum Exposure {
    FULL
    PART
    SHADE
}

type Crop @model {
    id: ID!
    commonName: String!
    latinName: String
    family: String
    seedDepth: Float
    minGermTemp: Int
    maxGermTemp: Int
    minGermTime: Int
    maxGermTime: Int
    sowIndoors: Int
    minSoilPh: Float
    maxSoilPh: Float
    minGrowTemp: Int
    maxGrowTemp: Int
    seedSpacing: Int
    thinTo: Int
    rowSpacing: Int
    waterFreq: Level
    nitrogenReq: Level
    phosphorusReq: Level
    potassiumReq: Level
    sunExposure: Exposure
    minFlowerToHarvestTime: Int
    maxFlowerToHarvestTime: Int
    sowIndoorsBeforeLastFrost: Int
    transplantBeforeLastFrost: Int
    sowOutdoorsBeforeLastFrost: Int
    sowOutdoorsBeforeFirstFrost: Int
    minDaysToMaturity: Int
    maxDaysToMaturity: Int
    baseGdd: Int
    gddToMaturity: Int
    numPerSqFt: Int!
    image: String!
}
